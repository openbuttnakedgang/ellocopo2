# [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy ) ] pub enum MsgReq < 'a > { Rd_BuildCompiler , Wr_BuildCompiler ( & 'a str ) , Rd_BuildGit , Wr_BuildGit ( & 'a str ) , Rd_BuildHost , Wr_BuildHost ( & 'a str ) , Rd_BuildProfile , Wr_BuildProfile ( & 'a str ) , Rd_BuildTarget , Wr_BuildTarget ( & 'a str ) , Rd_BuildTime , Wr_BuildTime ( & 'a str ) , Rd_BuildVersion , Wr_BuildVersion ( & 'a str ) , Rd_CalibAccB , Wr_CalibAccB ( i32 ) , Rd_CalibAccK , Wr_CalibAccK ( i32 ) , Rd_CalibEcgB , Wr_CalibEcgB ( i32 ) , Rd_CalibEcgK , Wr_CalibEcgK ( i32 ) , Rd_CalibReoB , Wr_CalibReoB ( i32 ) , Rd_CalibReoK , Wr_CalibReoK ( i32 ) , Rd_ConfCyclic , Wr_ConfCyclic ( bool ) , Rd_ConfTime , Wr_ConfTime ( u32 ) , Rd_CtrlErase , Wr_CtrlErase ( ( ) ) , Rd_CtrlEvent , Wr_CtrlEvent ( & 'a [ u8 ] ) , Rd_CtrlGotoLoader , Wr_CtrlGotoLoader ( ( ) ) , Rd_CtrlRecord , Wr_CtrlRecord ( bool ) , Rd_CtrlVis , Wr_CtrlVis ( bool ) , Rd_DbgFlags , Wr_DbgFlags ( u32 ) , Rd_DbgLast , Wr_DbgLast ( & 'a str ) , Rd_DbgLastCode , Wr_DbgLastCode ( u32 ) , Rd_DescSerial , Wr_DescSerial ( & 'a str ) , Rd_DescType , Wr_DescType ( & 'a str ) , Rd_DescVersion , Wr_DescVersion ( & 'a str ) , Rd_IoBusy , Wr_IoBusy ( bool ) , Rd_IoFileDir , Wr_IoFileDir ( bool ) , Rd_IoFileLen , Wr_IoFileLen ( u32 ) , Rd_IoFileMax , Wr_IoFileMax ( u32 ) , Rd_IoFilePos , Wr_IoFilePos ( u32 ) , Rd_IoFileStart , Wr_IoFileStart ( ( ) ) , Rd_IoStoreIdx , Wr_IoStoreIdx ( u8 ) , Rd_IoStoreLine , Wr_IoStoreLine ( & 'a [ u8 ] ) , Rd_IoStoreMax , Wr_IoStoreMax ( u32 ) , Rd_SignalEcgFrq , Wr_SignalEcgFrq ( u8 ) , Rd_SignalReoFrq , Wr_SignalReoFrq ( u8 ) , Rd_StateCurrent , Wr_StateCurrent ( i32 ) , Rd_StateStopReason , Wr_StateStopReason ( u32 ) , Rd_StateVoltage , Wr_StateVoltage ( i32 ) , Rd_SurveyBirth , Wr_SurveyBirth ( & 'a str ) , Rd_SurveyId , Wr_SurveyId ( u32 ) , Rd_SurveyName , Wr_SurveyName ( & 'a str ) , Rd_SurveyPatientId , Wr_SurveyPatientId ( & 'a str ) , Rd_SurveyPatronymic , Wr_SurveyPatronymic ( & 'a str ) , Rd_SurveySex , Wr_SurveySex ( & 'a str ) , Rd_SurveyStartTime , Wr_SurveyStartTime ( u32 ) , Rd_SurveySurname , Wr_SurveySurname ( & 'a str ) , Rd_TestEcho , Wr_TestEcho ( & 'a [ u8 ] ) , Rd_TestError , Wr_TestError ( & 'a str ) , Rd_TestTest1 , Wr_TestTest1 ( & 'a [ u8 ] ) , Rd_TestTest2 , Wr_TestTest2 ( & 'a [ u8 ] ) , Rd_TestTest3 , Wr_TestTest3 ( & 'a [ u8 ] ) , Rd_TestTest4 , Wr_TestTest4 ( & 'a [ u8 ] ) , Rd_TestTest5 , Wr_TestTest5 ( & 'a [ u8 ] ) , } pub fn req2msg < 'a > ( code : RequestCode , path : & str , value : Value < 'a > ) -> Result < MsgReq < 'a > , ( ) > { match ( code , path , value ) { ( RequestCode :: READ , "/build/compiler" , _ ) => Ok ( MsgReq :: Rd_BuildCompiler ) , ( RequestCode :: READ , "/build/git" , _ ) => Ok ( MsgReq :: Rd_BuildGit ) , ( RequestCode :: READ , "/build/host" , _ ) => Ok ( MsgReq :: Rd_BuildHost ) , ( RequestCode :: READ , "/build/profile" , _ ) => Ok ( MsgReq :: Rd_BuildProfile ) , ( RequestCode :: READ , "/build/target" , _ ) => Ok ( MsgReq :: Rd_BuildTarget ) , ( RequestCode :: READ , "/build/time" , _ ) => Ok ( MsgReq :: Rd_BuildTime ) , ( RequestCode :: READ , "/build/version" , _ ) => Ok ( MsgReq :: Rd_BuildVersion ) , ( RequestCode :: READ , "/calib/acc/b" , _ ) => Ok ( MsgReq :: Rd_CalibAccB ) , ( RequestCode :: READ , "/calib/acc/k" , _ ) => Ok ( MsgReq :: Rd_CalibAccK ) , ( RequestCode :: READ , "/calib/ecg/b" , _ ) => Ok ( MsgReq :: Rd_CalibEcgB ) , ( RequestCode :: READ , "/calib/ecg/k" , _ ) => Ok ( MsgReq :: Rd_CalibEcgK ) , ( RequestCode :: READ , "/calib/reo/b" , _ ) => Ok ( MsgReq :: Rd_CalibReoB ) , ( RequestCode :: READ , "/calib/reo/k" , _ ) => Ok ( MsgReq :: Rd_CalibReoK ) , ( RequestCode :: READ , "/conf/cyclic" , _ ) => Ok ( MsgReq :: Rd_ConfCyclic ) , ( RequestCode :: READ , "/conf/time" , _ ) => Ok ( MsgReq :: Rd_ConfTime ) , ( RequestCode :: READ , "/ctrl/erase" , _ ) => Ok ( MsgReq :: Rd_CtrlErase ) , ( RequestCode :: READ , "/ctrl/event" , _ ) => Ok ( MsgReq :: Rd_CtrlEvent ) , ( RequestCode :: READ , "/ctrl/goto_loader" , _ ) => Ok ( MsgReq :: Rd_CtrlGotoLoader ) , ( RequestCode :: READ , "/ctrl/record" , _ ) => Ok ( MsgReq :: Rd_CtrlRecord ) , ( RequestCode :: READ , "/ctrl/vis" , _ ) => Ok ( MsgReq :: Rd_CtrlVis ) , ( RequestCode :: READ , "/dbg/flags" , _ ) => Ok ( MsgReq :: Rd_DbgFlags ) , ( RequestCode :: READ , "/dbg/last" , _ ) => Ok ( MsgReq :: Rd_DbgLast ) , ( RequestCode :: READ , "/dbg/last_code" , _ ) => Ok ( MsgReq :: Rd_DbgLastCode ) , ( RequestCode :: READ , "/desc/serial" , _ ) => Ok ( MsgReq :: Rd_DescSerial ) , ( RequestCode :: READ , "/desc/type" , _ ) => Ok ( MsgReq :: Rd_DescType ) , ( RequestCode :: READ , "/desc/version" , _ ) => Ok ( MsgReq :: Rd_DescVersion ) , ( RequestCode :: READ , "/io/busy" , _ ) => Ok ( MsgReq :: Rd_IoBusy ) , ( RequestCode :: READ , "/io/file/dir" , _ ) => Ok ( MsgReq :: Rd_IoFileDir ) , ( RequestCode :: READ , "/io/file/len" , _ ) => Ok ( MsgReq :: Rd_IoFileLen ) , ( RequestCode :: READ , "/io/file/max" , _ ) => Ok ( MsgReq :: Rd_IoFileMax ) , ( RequestCode :: READ , "/io/file/pos" , _ ) => Ok ( MsgReq :: Rd_IoFilePos ) , ( RequestCode :: READ , "/io/file/start" , _ ) => Ok ( MsgReq :: Rd_IoFileStart ) , ( RequestCode :: READ , "/io/store/idx" , _ ) => Ok ( MsgReq :: Rd_IoStoreIdx ) , ( RequestCode :: READ , "/io/store/line" , _ ) => Ok ( MsgReq :: Rd_IoStoreLine ) , ( RequestCode :: READ , "/io/store/max" , _ ) => Ok ( MsgReq :: Rd_IoStoreMax ) , ( RequestCode :: READ , "/signal/ecg/frq" , _ ) => Ok ( MsgReq :: Rd_SignalEcgFrq ) , ( RequestCode :: READ , "/signal/reo/frq" , _ ) => Ok ( MsgReq :: Rd_SignalReoFrq ) , ( RequestCode :: READ , "/state/current" , _ ) => Ok ( MsgReq :: Rd_StateCurrent ) , ( RequestCode :: READ , "/state/stop_reason" , _ ) => Ok ( MsgReq :: Rd_StateStopReason ) , ( RequestCode :: READ , "/state/voltage" , _ ) => Ok ( MsgReq :: Rd_StateVoltage ) , ( RequestCode :: READ , "/survey/birth" , _ ) => Ok ( MsgReq :: Rd_SurveyBirth ) , ( RequestCode :: READ , "/survey/id" , _ ) => Ok ( MsgReq :: Rd_SurveyId ) , ( RequestCode :: READ , "/survey/name" , _ ) => Ok ( MsgReq :: Rd_SurveyName ) , ( RequestCode :: READ , "/survey/patient_id" , _ ) => Ok ( MsgReq :: Rd_SurveyPatientId ) , ( RequestCode :: READ , "/survey/patronymic" , _ ) => Ok ( MsgReq :: Rd_SurveyPatronymic ) , ( RequestCode :: READ , "/survey/sex" , _ ) => Ok ( MsgReq :: Rd_SurveySex ) , ( RequestCode :: READ , "/survey/start_time" , _ ) => Ok ( MsgReq :: Rd_SurveyStartTime ) , ( RequestCode :: READ , "/survey/surname" , _ ) => Ok ( MsgReq :: Rd_SurveySurname ) , ( RequestCode :: READ , "/test/echo" , _ ) => Ok ( MsgReq :: Rd_TestEcho ) , ( RequestCode :: READ , "/test/error" , _ ) => Ok ( MsgReq :: Rd_TestError ) , ( RequestCode :: READ , "/test/test1" , _ ) => Ok ( MsgReq :: Rd_TestTest1 ) , ( RequestCode :: READ , "/test/test2" , _ ) => Ok ( MsgReq :: Rd_TestTest2 ) , ( RequestCode :: READ , "/test/test3" , _ ) => Ok ( MsgReq :: Rd_TestTest3 ) , ( RequestCode :: READ , "/test/test4" , _ ) => Ok ( MsgReq :: Rd_TestTest4 ) , ( RequestCode :: READ , "/test/test5" , _ ) => Ok ( MsgReq :: Rd_TestTest5 ) , ( RequestCode :: WRITE , "/build/compiler" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildCompiler ( v ) ) , ( RequestCode :: WRITE , "/build/git" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildGit ( v ) ) , ( RequestCode :: WRITE , "/build/host" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildHost ( v ) ) , ( RequestCode :: WRITE , "/build/profile" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildProfile ( v ) ) , ( RequestCode :: WRITE , "/build/target" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildTarget ( v ) ) , ( RequestCode :: WRITE , "/build/time" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildTime ( v ) ) , ( RequestCode :: WRITE , "/build/version" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_BuildVersion ( v ) ) , ( RequestCode :: WRITE , "/calib/acc/b" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_CalibAccB ( v ) ) , ( RequestCode :: WRITE , "/calib/acc/k" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_CalibAccK ( v ) ) , ( RequestCode :: WRITE , "/calib/ecg/b" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_CalibEcgB ( v ) ) , ( RequestCode :: WRITE , "/calib/ecg/k" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_CalibEcgK ( v ) ) , ( RequestCode :: WRITE , "/calib/reo/b" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_CalibReoB ( v ) ) , ( RequestCode :: WRITE , "/calib/reo/k" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_CalibReoK ( v ) ) , ( RequestCode :: WRITE , "/conf/cyclic" , Value :: BOOL ( v ) ) => Ok ( MsgReq :: Wr_ConfCyclic ( v ) ) , ( RequestCode :: WRITE , "/conf/time" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_ConfTime ( v ) ) , ( RequestCode :: WRITE , "/ctrl/erase" , Value :: UNIT ( v ) ) => Ok ( MsgReq :: Wr_CtrlErase ( v ) ) , ( RequestCode :: WRITE , "/ctrl/event" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_CtrlEvent ( v ) ) , ( RequestCode :: WRITE , "/ctrl/goto_loader" , Value :: UNIT ( v ) ) => Ok ( MsgReq :: Wr_CtrlGotoLoader ( v ) ) , ( RequestCode :: WRITE , "/ctrl/record" , Value :: BOOL ( v ) ) => Ok ( MsgReq :: Wr_CtrlRecord ( v ) ) , ( RequestCode :: WRITE , "/ctrl/vis" , Value :: BOOL ( v ) ) => Ok ( MsgReq :: Wr_CtrlVis ( v ) ) , ( RequestCode :: WRITE , "/dbg/flags" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_DbgFlags ( v ) ) , ( RequestCode :: WRITE , "/dbg/last" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_DbgLast ( v ) ) , ( RequestCode :: WRITE , "/dbg/last_code" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_DbgLastCode ( v ) ) , ( RequestCode :: WRITE , "/desc/serial" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_DescSerial ( v ) ) , ( RequestCode :: WRITE , "/desc/type" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_DescType ( v ) ) , ( RequestCode :: WRITE , "/desc/version" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_DescVersion ( v ) ) , ( RequestCode :: WRITE , "/io/busy" , Value :: BOOL ( v ) ) => Ok ( MsgReq :: Wr_IoBusy ( v ) ) , ( RequestCode :: WRITE , "/io/file/dir" , Value :: BOOL ( v ) ) => Ok ( MsgReq :: Wr_IoFileDir ( v ) ) , ( RequestCode :: WRITE , "/io/file/len" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_IoFileLen ( v ) ) , ( RequestCode :: WRITE , "/io/file/max" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_IoFileMax ( v ) ) , ( RequestCode :: WRITE , "/io/file/pos" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_IoFilePos ( v ) ) , ( RequestCode :: WRITE , "/io/file/start" , Value :: UNIT ( v ) ) => Ok ( MsgReq :: Wr_IoFileStart ( v ) ) , ( RequestCode :: WRITE , "/io/store/idx" , Value :: U8 ( v ) ) => Ok ( MsgReq :: Wr_IoStoreIdx ( v ) ) , ( RequestCode :: WRITE , "/io/store/line" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_IoStoreLine ( v ) ) , ( RequestCode :: WRITE , "/io/store/max" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_IoStoreMax ( v ) ) , ( RequestCode :: WRITE , "/signal/ecg/frq" , Value :: U8 ( v ) ) => Ok ( MsgReq :: Wr_SignalEcgFrq ( v ) ) , ( RequestCode :: WRITE , "/signal/reo/frq" , Value :: U8 ( v ) ) => Ok ( MsgReq :: Wr_SignalReoFrq ( v ) ) , ( RequestCode :: WRITE , "/state/current" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_StateCurrent ( v ) ) , ( RequestCode :: WRITE , "/state/stop_reason" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_StateStopReason ( v ) ) , ( RequestCode :: WRITE , "/state/voltage" , Value :: I32 ( v ) ) => Ok ( MsgReq :: Wr_StateVoltage ( v ) ) , ( RequestCode :: WRITE , "/survey/birth" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_SurveyBirth ( v ) ) , ( RequestCode :: WRITE , "/survey/id" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_SurveyId ( v ) ) , ( RequestCode :: WRITE , "/survey/name" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_SurveyName ( v ) ) , ( RequestCode :: WRITE , "/survey/patient_id" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_SurveyPatientId ( v ) ) , ( RequestCode :: WRITE , "/survey/patronymic" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_SurveyPatronymic ( v ) ) , ( RequestCode :: WRITE , "/survey/sex" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_SurveySex ( v ) ) , ( RequestCode :: WRITE , "/survey/start_time" , Value :: U32 ( v ) ) => Ok ( MsgReq :: Wr_SurveyStartTime ( v ) ) , ( RequestCode :: WRITE , "/survey/surname" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_SurveySurname ( v ) ) , ( RequestCode :: WRITE , "/test/echo" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_TestEcho ( v ) ) , ( RequestCode :: WRITE , "/test/error" , Value :: STR ( v ) ) => Ok ( MsgReq :: Wr_TestError ( v ) ) , ( RequestCode :: WRITE , "/test/test1" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_TestTest1 ( v ) ) , ( RequestCode :: WRITE , "/test/test2" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_TestTest2 ( v ) ) , ( RequestCode :: WRITE , "/test/test3" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_TestTest3 ( v ) ) , ( RequestCode :: WRITE , "/test/test4" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_TestTest4 ( v ) ) , ( RequestCode :: WRITE , "/test/test5" , Value :: BYTES ( v ) ) => Ok ( MsgReq :: Wr_TestTest5 ( v ) ) , _ => Err ( ( ) ) } }