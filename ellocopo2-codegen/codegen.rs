pub mod msg { # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Acc { B_W ( i32 ) , B_R , K_W ( i32 ) , K_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Ecg { B_W ( i32 ) , B_R , K_W ( i32 ) , K_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Reo { B_W ( i32 ) , B_R , K_W ( i32 ) , K_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Calib { Acc ( Acc ) , Ecg ( Ecg ) , Reo ( Reo ) , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Conf { Cyclic_W ( bool ) , Cyclic_R , Time_W ( u32 ) , Time_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Ctrl < 'a > { Erase_W ( ( ) ) , Event_W ( & 'a [ u8 ] ) , GotoLoader_W ( ( ) ) , Record_W ( bool ) , Record_R , Vis_W ( bool ) , Vis_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Dbg { Flags_R , Last_R , LastCode_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Desc { Serial_R , Type_R , Version_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum File { Len_W ( u32 ) , Len_R , Max_R , Pos_W ( u32 ) , Pos_R , Start_W ( ( ) ) , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Store < 'a > { Idx_W ( u8 ) , Idx_R , Line_W ( & 'a [ u8 ] ) , Line_R , Max_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Io < 'a > { File ( File ) , Status_W ( u32 ) , Status_R , Store ( Store < 'a > ) , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Ecgf { Frq_W ( u8 ) , Frq_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Reof { Frq_W ( u8 ) , Frq_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Signal { Ecgf ( Ecgf ) , Reof ( Reof ) , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum State { Current_R , StopReason_R , Voltage_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Survey < 'a > { Birth_W ( & 'a str ) , Birth_R , Id_W ( u32 ) , Id_R , Name_W ( & 'a str ) , Name_R , PatientId_W ( & 'a str ) , PatientId_R , Patronymic_W ( & 'a str ) , Patronymic_R , Sex_W ( & 'a str ) , Sex_R , StartTime_W ( u32 ) , StartTime_R , Surname_W ( & 'a str ) , Surname_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Test < 'a > { Echo_W ( & 'a [ u8 ] ) , Echo_R , Error_W ( & 'a str ) , Error_R , Test1_W ( & 'a [ u8 ] ) , Test1_R , Test2_W ( & 'a [ u8 ] ) , Test2_R , Test3_W ( & 'a [ u8 ] ) , Test3_R , Test4_W ( & 'a [ u8 ] ) , Test4_R , Test5_W ( & 'a [ u8 ] ) , Test5_R , } # [ allow ( non_camel_case_types ) ] # [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ] pub enum Msg < 'a > { Calib ( Calib ) , Conf ( Conf ) , Ctrl ( Ctrl < 'a > ) , Dbg ( Dbg ) , Desc ( Desc ) , Io ( Io < 'a > ) , Signal ( Signal ) , State ( State ) , Survey ( Survey < 'a > ) , Test ( Test < 'a > ) , Time_W ( u32 ) , Time_R , } } pub use msg :: * ; pub fn req2msg < 'a > ( code : RequestCode , path : & str , v : Value < 'a > , sys_lvl : PrivLvl ) -> DispatchResult < 'a > { if code == RequestCode :: READ { let _ : ( ) = map_ty_error ! ( v ) ; } match path { "/build/compiler" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_compiler_r ( ) ) } "/build/git" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_git_r ( ) ) } "/build/host" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_host_r ( ) ) } "/build/profile" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_profile_r ( ) ) } "/build/target" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_target_r ( ) ) } "/build/time" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_time_r ( ) ) } "/build/version" => { impl_arm ! ( FAST , RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , cb_build_version_r ( ) ) } "/calib/acc/b" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Calib ( Calib :: Acc ( Acc :: B_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Calib ( Calib :: Acc ( Acc :: B_R ) ) ) } "/calib/acc/k" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Calib ( Calib :: Acc ( Acc :: K_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Calib ( Calib :: Acc ( Acc :: K_R ) ) ) } "/calib/ecg/b" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Calib ( Calib :: Ecg ( Ecg :: B_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Calib ( Calib :: Ecg ( Ecg :: B_R ) ) ) } "/calib/ecg/k" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Calib ( Calib :: Ecg ( Ecg :: K_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Calib ( Calib :: Ecg ( Ecg :: K_R ) ) ) } "/calib/reo/b" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Calib ( Calib :: Reo ( Reo :: B_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Calib ( Calib :: Reo ( Reo :: B_R ) ) ) } "/calib/reo/k" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Calib ( Calib :: Reo ( Reo :: K_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Calib ( Calib :: Reo ( Reo :: K_R ) ) ) } "/conf/cyclic" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Conf ( Conf :: Cyclic_W ( map_ty_error ! ( v ) ) ) , Msg :: Conf ( Conf :: Cyclic_R ) ) } "/conf/time" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Conf ( Conf :: Time_W ( map_ty_error ! ( v ) ) ) , Msg :: Conf ( Conf :: Time_R ) ) } "/ctrl/erase" => { impl_arm ! ( WO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Ctrl ( Ctrl :: Erase_W ( map_ty_error ! ( v ) ) ) ) } "/ctrl/event" => { impl_arm ! ( WO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Ctrl ( Ctrl :: Event_W ( map_ty_error ! ( v ) ) ) ) } "/ctrl/goto_loader" => { impl_arm ! ( WO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Ctrl ( Ctrl :: GotoLoader_W ( map_ty_error ! ( v ) ) ) ) } "/ctrl/record" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Ctrl ( Ctrl :: Record_W ( map_ty_error ! ( v ) ) ) , Msg :: Ctrl ( Ctrl :: Record_R ) ) } "/ctrl/vis" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Ctrl ( Ctrl :: Vis_W ( map_ty_error ! ( v ) ) ) , Msg :: Ctrl ( Ctrl :: Vis_R ) ) } "/dbg/flags" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Dbg ( Dbg :: Flags_R ) ) } "/dbg/last" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Dbg ( Dbg :: Last_R ) ) } "/dbg/last_code" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Dbg ( Dbg :: LastCode_R ) ) } "/desc/serial" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Desc ( Desc :: Serial_R ) ) } "/desc/type" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Desc ( Desc :: Type_R ) ) } "/desc/version" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Desc ( Desc :: Version_R ) ) } "/io/file/len" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: File ( File :: Len_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Io ( Io :: File ( File :: Len_R ) ) ) } "/io/file/max" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: File ( File :: Max_R ) ) ) } "/io/file/pos" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: File ( File :: Pos_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Io ( Io :: File ( File :: Pos_R ) ) ) } "/io/file/start" => { impl_arm ! ( WO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: File ( File :: Start_W ( map_ty_error ! ( v ) ) ) ) ) } "/io/status" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: Status_W ( map_ty_error ! ( v ) ) ) , Msg :: Io ( Io :: Status_R ) ) } "/io/store/idx" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: Store ( Store :: Idx_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Io ( Io :: Store ( Store :: Idx_R ) ) ) } "/io/store/line" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: Store ( Store :: Line_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Io ( Io :: Store ( Store :: Line_R ) ) ) } "/io/store/max" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Io ( Io :: Store ( Store :: Max_R ) ) ) } "/signal/ecgf/frq" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Signal ( Signal :: Ecgf ( Ecgf :: Frq_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Signal ( Signal :: Ecgf ( Ecgf :: Frq_R ) ) ) } "/signal/reof/frq" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Signal ( Signal :: Reof ( Reof :: Frq_W ( map_ty_error ! ( v ) ) ) ) , Msg :: Signal ( Signal :: Reof ( Reof :: Frq_R ) ) ) } "/state/current" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: State ( State :: Current_R ) ) } "/state/stop_reason" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: State ( State :: StopReason_R ) ) } "/state/voltage" => { impl_arm ! ( RO , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: State ( State :: Voltage_R ) ) } "/survey/birth" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: Birth_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: Birth_R ) ) } "/survey/id" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: Id_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: Id_R ) ) } "/survey/name" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: Name_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: Name_R ) ) } "/survey/patient_id" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: PatientId_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: PatientId_R ) ) } "/survey/patronymic" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: Patronymic_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: Patronymic_R ) ) } "/survey/sex" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: Sex_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: Sex_R ) ) } "/survey/start_time" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: StartTime_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: StartTime_R ) ) } "/survey/surname" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Survey ( Survey :: Surname_W ( map_ty_error ! ( v ) ) ) , Msg :: Survey ( Survey :: Surname_R ) ) } "/test/echo" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Echo_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Echo_R ) ) } "/test/error" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Error_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Error_R ) ) } "/test/test1" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Test1_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Test1_R ) ) } "/test/test2" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Test2_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Test2_R ) ) } "/test/test3" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Test3_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Test3_R ) ) } "/test/test4" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Test4_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Test4_R ) ) } "/test/test5" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Test ( Test :: Test5_W ( map_ty_error ! ( v ) ) ) , Msg :: Test ( Test :: Test5_R ) ) } "/time" => { impl_arm ! ( RW , code , sys_lvl , PrivLvl :: NORMAL_LVL , Msg :: Time_W ( map_ty_error ! ( v ) ) , Msg :: Time_R ) } _ => { DispatchResult :: Err ( AnswerCode :: ERR_PATH ) } } }